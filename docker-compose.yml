version: '3.8'

services:
  # Sql Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - SA_PASSWORD=Admin*123
      - ACCEPT_EULA=Y
    ports:
      - "5002:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql

  # PostgreSQL Database
  db:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "todolistdb"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "Admin*123"

  # pgAdmin Web Interface
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "Admin*123"
    depends_on:
      - db
    links:
      - db:postgres
    networks:
      - monitoring

  # .API TODO LIST
  web:
    build:
      context: .
      dockerfile: src/ToDoList.API/Dockerfile
    container_name: todolist_app
    restart: always
    ports:
      - "5005:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__Postgres: "Host=host.docker.internal;Database=todolistdb;Username=admin;Password=Admin*123"
      ElasticConfiguration__Uri: "http://host.docker.internal:9200"
    depends_on:
      - db
    links:
      - db
    networks:
      - monitoring

  # .API TODO LIST
  grpc-web-api-user:
    build:
      context: .
      dockerfile: src/Grpc.User.API/Dockerfile
    container_name: grpc_user_app
    restart: always
    ports:
      - "5003:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__Sql: "Host=host.docker.internal;Database=todolistdb;Username=sa;Password=Admin*123"
      ElasticConfiguration__Uri: "http://host.docker.internal:9200"
    depends_on:
      - db
    links:
      - db
    networks:
      - monitoring

 # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    depends_on:
      - web
  
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoring
    depends_on:
      - prometheus

  # #Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.1
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - esdata:/usr/share/elasticsearch/data

networks:
  monitoring:

volumes:
  sqlserverdata:
  grafana-storage:
  esdata:    